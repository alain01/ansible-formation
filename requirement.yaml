# CF TP2 Variables_facts

- name: PLAY requirements - variables et facts
  hosts: common
  
  # Bloc vars : déclaration de variables dans le playbook
  vars:
    
    # variable de type liste
    liste_packages:
      - vim
      - nano
      - curl
      - tmux

    # variable de type liste
    #liste_user:
    #  - formation
    #  - dev01
    #  - deploy01

    liste_user:
      formation:
        state: present
        create_home: true
        shell: /bin/bash
        comment: User formation
      dev01:
        state: present
        create_home: true
        shell: /bin/bash
      deploy01:
        state: present

  tasks:
    # Exercice 1
    - name: "Utilisation des facts via module : debug"
      ansible.builtin.debug:
        #msg: "La distri est un {{ ansible_distribution }}"
        msg: 
          - "La distri est un {{ ansible_facts['distribution'] }}"
          - "La version majeure est : {{ ansible_facts['distribution_major_version'] }}"
          - "Executable python : {{ ansible_facts['python']['executable'] }}"
        #msg: "Executable python : {{ ansible_python.executable }}"
        #var: ansible_facts['python']
        verbosity: 2

    # Exercice 2
    - name: "Installation de packages"
      ansible.builtin.package:
        # Injection du contenu de la variable liste_package => liste d'éléments
        name: "{{ liste_packages }}"
        state: present
      become: true


    # Exercice 3
    #- name: "Creation des utilisateurs"
    #  ansible.builtin.user:
    #    # Injection d'un élément : item de la variable liste_user
    #    name: "{{ item }}"
    #  # Utilisation de la fonction loop pour traiter les éléments d'une liste
    #  loop: "{{ liste_user }}"
    #  become: true

    # Exercice 4
    - name: "Creation des utilisateurs"  
      ansible.builtin.user:
        # Injection des éléments d'un dictionnaire : item.key et item.value
        name: "{{ item.key }}"
        # Utilisation d'un filter pour positionner une valeur par defaut si item.value.state est vide
        state: "{{ item.value.state | default('absent') }}"
        create_home: "{{ item.value.create_home | default('yes') }}"
        # Utilisation d'un filter default avec omit pour ne pas traiter le parametre shell (/!\ les valeur par defaut prevues par le module sont conservées)
        shell: "{{ item.value.shell | default(omit) }}"
        comment: "{{ item.value.comment | default(omit) }}"
      # Utilisation de la fonction loop pour traiter les éléments d'une liste
      loop: "{{ liste_user | dict2items}}"
      become: true